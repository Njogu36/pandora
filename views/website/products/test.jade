extend ../layout.jade 
block content
 #contentrow.row.layout--twocolumnProductPage
  #contentiInnerRow.clearfix
    .row__container
      // product breadcrumb
      .product-page-wrapper
        .DT_breadcrumbs
          .breadcrumb__container
            .grid_12
              .row__container
                .breadcrumb(aria-label='breadcrumbs')
                  ul
                    li
                      a(href='/') Home
                    li
                      span.breadcrumb-separator  / 
                    li
                      a(href='/products/'+product.name) #{products.name}
        .DT_product-details-page.DTV3.clearfix(itemscope='' itemtype='http://schema.org/IndividualProduct')
          .row__container.catfish-container
            .DT_product-details-page-main
              form#productVariantForm(action='https://www.hatchprint.co.uk/p/310/pin-badges' method='post')
                .DT_product-collateral.DT_product-collateral-top
                  // product overview
                  .overview-intro
                    h1.productname.acentcolour(itemprop='name')
                      | #{product.name}
                .columns
                  .DT_product-essential.column.is-6
                    .DT_product-details-info
                      // product pictures
                      .DT_picture
                        script.
                          (function (s, i, r, v) {
                          v = i.createElement(r); v.async = 0;
                          v.src = 'https://scripts.sirv.com/sirv.js';
                          i.getElementsByTagName(r)[0].parentNode.appendChild(v);
                          })(window, document, 'script');
                        script.
                          function ShowPic(target) {
                          $('.DT_bigpicture a').hide();
                          $('.DT_bigpicture a.thumb_' + target).show();
                          if ($('.DT_bigpicture a.thumb_' + target + ' img')[0]) {
                          $('.DT_bigpicture a.thumb_' + target).attr('style', $('.DT_bigpicture a.thumb_' + target).attr('data-style'));
                          $('.DT_bigpicture a.thumb_' + target + ' img').attr('src', $('.DT_bigpicture a.thumb_' + target + ' img').attr('data-src'));
                          }
                          }
                        .DT_bigpicture
                          a.thumb_1(href='#{product.cover}' rel='lightbox-p' title='Badges' alt='Picture of Badges' data-style="background-image:url('#{product.cover}')")
                            img(alt='Picture of Badges' data-src='#{product.cover}' style='width:100%; height:100%; opacity:0;' itemprop='image')
                        script.
                          ShowPic(1);
                        .clear
                        .clear
                      script.
                        var offset = 0;
                        var thumbHeight = 0;
                        var thumbMargin = 0
                        var curpos = 0;
                        function set_thumb_height() {
                        $('.DT_thumb').css('height', thumbHeight + 'px');
                        $('.DT_thumb').css('margin-bottom', thumbMargin + 'px');
                        $('.DT_thumb').css('padding-bottom', '0px');
                        }
                        function calc_values() {
                        // let's get the height value and round it
                        var roundedHeight = Math.round($('.DT_bigpicture').width() - 40 );
                        // we normalize the height of container
                        $('.DT_thumb_carousel_body').css('height', roundedHeight + 'px');
                        $('.DT_thumb_carousel_body').css('padding-bottom', '0px');
                        $('.DT_bigpicture').css('height', (roundedHeight + 40) + 'px');
                        $('.DT_bigpicture').css('padding-bottom', '0px');
                        // Lets calculate the height
                        thumbHeight = roundedHeight * 0.23;
                        thumbMargin = (roundedHeight - (thumbHeight * 4)) / 3;
                        offset = thumbHeight + thumbMargin;
                        set_thumb_height();
                        }
                        function show_arrows() {
                        if ($('.DT_thumb_carousel').height() < $('.DT_thumb_carousel_body').height()) {
                        $('.DT_prev_button').hide();
                        $('.DT_next_button').hide();
                        } else {
                        $('.DT_prev_button').show();
                        $('.DT_next_button').show();
                        if (curpos == 0) {
                        $('.DT_prev_button').hide();
                        }
                        if (curpos - offset + $('.DT_thumb_carousel').height() < $('.DT_thumb_carousel_body').height()) {
                        $('.DT_prev_button').show();
                        $('.DT_next_button').hide();
                        }
                        }
                        }
                        function DT_carousel_prev() {
                        curpos = curpos + offset;
                        $('.DT_thumb_carousel').css('top', curpos + 'px');
                        show_arrows();
                        }
                        function DT_carousel_next() {
                        curpos = curpos - offset;
                        $('.DT_thumb_carousel').css('top', curpos + 'px');
                        show_arrows();
                        }
                        calc_values();
                        show_arrows();
                        $(window).resize(function () {
                        offset = 0;
                        thumbHeight = 0;
                        thumbMargin = 0
                        curpos = 0;
                        $('.DT_thumb_carousel').css('top', curpos + 'px');
                        calc_values();
                        show_arrows();
                        });
                    .global_content
                      script(src='../../-1416682783/Handler/CSSOverride/GetImage/2/product-script.js')
                      script(src='../../1758845779/Handler/CSSOverride/GetImage/2/imageChanger.js')
                  .DT_product-collateral.DT_product-collateral-bottom.column.is-6
                    // product overview
                    .overview
                      .fulldescription
                        div(style='overflow-y:scroll;height:500px;')
                          !{product.description}
                      // product variants
                      .product-variant-list
                        .product-variant-line
                         
                          // TC uses this bit
                          .TC_midfield(style='display:none;')
                          // ------------------------------
                          .attributes
                            
                            each x in categories
                             if x.has_icons === 'Yes'
                              #39.attribute.type_RadioList.Binding_Type.clearfix.rootAttribute(data-location='1')
                               .attributeHeader
                                .attributeTitle
                                  | #{x.title}
                                  span.attributeRequired *
                               .attribute-item
                                each y in x.sub_categories
                                  input#product_attribute_g39_1_227.Input.attributeLogic.Saddle_Stitched(hook='hook_227' data-attr-id='g39' type='radio' name='#{x.title}' value='#{y.name}' checked='checked')
                                  label#label_227.Label.Saddle_Stitched(hook='hook_227' ) #{y.name} 
                                  #hook_227.attributeValueInfo
                                    span.icon(class=y.icon)
                                    span #{y.name}
                              br
                            each x in categories
                             if x.has_icons === 'Yes'
                              #39.attribute.type_RadioList.Binding_Type.clearfix.rootAttribute(data-location='1')
                               .attributeHeader
                                .attributeTitle
                                  | #{x.title}
                                  span.attributeRequired *
                               .attribute-item
                                each y in x.sub_categories
                                  input#product_attribute_g39_1_227.Input.attributeLogic.Saddle_Stitched(hook='hook_227' data-attr-id='g39' type='radio' name='#{x.title}' value='#{y.name}' checked='checked')
                                  label#label_227.Label.Saddle_Stitched(hook='hook_227' ) #{y.name} 
                                  #hook_227.attributeValueInfo
                                    span.icon(class=y.icon)
                                    span #{y.name}
                              br
                            each x in categories
                             if x.has_icons === 'Yes'
                              #39.attribute.type_RadioList.Binding_Type.clearfix.rootAttribute(data-location='1')
                               .attributeHeader
                                .attributeTitle
                                  | #{x.title}
                                  span.attributeRequired *
                               .attribute-item
                                each y in x.sub_categories
                                  input#product_attribute_g39_1_227.Input.attributeLogic.Saddle_Stitched(hook='hook_227' data-attr-id='g39' type='radio' name='#{x.title}' value='#{y.name}' checked='checked')
                                  label#label_227.Label.Saddle_Stitched(hook='hook_227' ) #{y.name} 
                                  #hook_227.attributeValueInfo
                                    span.icon(class=y.icon)
                                    span #{y.name}
                              br
                            each x in categories
                             if x.has_icons === 'Yes'
                              #39.attribute.type_RadioList.Binding_Type.clearfix.rootAttribute(data-location='1')
                               .attributeHeader
                                .attributeTitle
                                  | #{x.title}
                                  span.attributeRequired *
                               .attribute-item
                                each y in x.sub_categories
                                  input#product_attribute_g39_1_227.Input.attributeLogic.Saddle_Stitched(hook='hook_227' data-attr-id='g39' type='radio' name='#{x.title}' value='#{y.name}' checked='checked')
                                  label#label_227.Label.Saddle_Stitched(hook='hook_227' ) #{y.name} 
                                  #hook_227.attributeValueInfo
                                    span.icon(class=y.icon)
                                    span #{y.name}
                              br
                            each x in categories
                             if x.has_icons === 'Yes'
                              #39.attribute.type_RadioList.Binding_Type.clearfix.rootAttribute(data-location='1')
                               .attributeHeader
                                .attributeTitle
                                  | #{x.title}
                                  span.attributeRequired *
                               .attribute-item
                                each y in x.sub_categories
                                  input#product_attribute_g39_1_227.Input.attributeLogic.Saddle_Stitched(hook='hook_227' data-attr-id='g39' type='radio' name='#{x.title}' value='#{y.name}' checked='checked')
                                  label#label_227.Label.Saddle_Stitched(hook='hook_227' ) #{y.name} 
                                  #hook_227.attributeValueInfo
                                    span.icon(class=y.icon)
                                    span #{y.name}
                              br
                            each x in categories
                             if x.has_icons === 'No'
                              label#label_227.Label.Saddle_Stitched #{x.title}
                              br
                              select.form-control(name="#{x.title}" required )
                               each y  in x.sub_categories
                                option(value="#{y.name}") #{y.name} 
                              br
                            each x in categories
                             if x.has_icons === 'No'
                              label#label_227.Label.Saddle_Stitched #{x.title}
                              br
                              select.form-control(name="#{x.title}" required )
                               each y  in x.sub_categories
                                option(value="#{y.name}") #{y.name} 
                              br
                            each x in categories
                             if x.has_icons === 'No'
                              label#label_227.Label.Saddle_Stitched #{x.title}
                              br
                              select.form-control(name="#{x.title}" required )
                               each y  in x.sub_categories
                                option(value="#{y.name}") #{y.name} 
                              br
                            each x in categories
                             if x.has_icons === 'No'
                              label#label_227.Label.Saddle_Stitched #{x.title}
                              br
                              select.form-control(name="#{x.title}" required )
                               each y  in x.sub_categories
                                option(value="#{y.name}") #{y.name} 
                              br
                            each x in categories
                             if x.has_icons === 'No'
                              label#label_227.Label.Saddle_Stitched #{x.title}
                              br
                              select.form-control(name="#{x.title}" required )
                               each y  in x.sub_categories
                                option(value="#{y.name}") #{y.name} 
                              br
                            
                          input#quoteId(type='hidden' name='quoteId' value='')
                          script(type='text/javascript').
                            var loadOldAttributeValues = false;
                            $(".rootAttribute").on("change", function () {
                            loadOldAttributeValues = false;
                            });
                            var predefinedValues = {
                            };
                            //need to build this in razor
                            //    var g_globalCondition = [
                            //        { "id": 2, "value": 15, "child": 3, "selectionValues":[1, 2, 3] },
                            //    ];
                            var g_globalCondition = [
                            {"id":328,"value":1610,"child":326,"selectionValues":[1593,1598,1599,1600,1601,1602,1603]},
                            ];
                            var g_globalLocation = 0;
                            function getMatchingCondition(attributeId, value) {
                            //value may be empty, in which case we return all of them
                            var result = [];
                            for (var i = 0; i < g_globalCondition.length; i++) {
                            if (g_globalCondition[i].id == attributeId) {
                            if (!value || value == g_globalCondition[i].value) {
                            result.push(g_globalCondition[i]);
                            }
                            }
                            }
                            return result;
                            }
                            function removeDuplicates(target, source) {
                            for (var i = 0; i < source.length; ++i) {
                            for (var j = 0; j < target.length; ++j) {
                            if (target[j] == source[i]) {
                            target.splice(j, 1);
                            break;
                            }
                            }
                            }
                            }
                            /// <summary>
                            /// Updates the visibility of the matching items.
                            /// </summary>
                            /// <param name="matchingItems">The matching items.</param>
                            /// <param name="visible">True or false.</param>
                            function updateVisibility(matchingItems, visible) {
                            for (var i = 0; i < matchingItems.length; i++) {
                            var item = $("#" + matchingItems[i]);
                            updateNodeVisibility($(item),visible);
                            // Restore the checked status and dropdown defaults
                            if (visible) {
                            item.find(".attributeLogic").each(function(index, attributeElem) {
                            resetPredefinedValue(attributeElem);
                            });
                            }
                            else {
                            item.find(".attributeLogic").each(function(index, attributeElem) {
                            if ($(attributeElem).attr('type') == 'radio')
                            {
                            $(attributeElem).attr('checked', false); // uncheck the hidden attribute because it should not participate at price calculation
                            var attributeId = $(attributeElem).parents(".attribute").attr("id");
                            var value = $(attributeElem).val();
                            handleAttributeItem(attributeId, value, false);
                            } else if ($(attributeElem).is("select")) {
                            //attributeElem.value = "0";
                            //$(attributeElem).attr('selected', false); // unselected the hidden attribute because it should not participate at price calculation
                            $(attributeElem).val([]); // unselected the hidden attribute because it should not participate at price calculation
                            var attributeId = $(attributeElem).parents(".attribute").attr("id");
                            var value = $(attributeElem).val();
                            handleAttributeItem(attributeId, value, null);
                            }
                            });
                            }
                            }
                            }
                            /// <summary>
                            /// Handles an attributeItem finding the matching conditions and showing and hiding the values.
                            /// </summary>
                            /// <param name="attributeId">The attribute identifier.</param>
                            /// <param name="value">The value.</param>
                            /// <param name="checkedStatus">The checked status if the source is a checkbox. Can be unsassigned.</param>
                            function handleAttributeItem(attributeId, value, checkedStatus)
                            {
                            var conditions = getMatchingCondition(attributeId);
                            var notMatchingItems = [];
                            var matchingItems = [];
                            var matchingItemsValues = new Map();
                            for (var i = 0; i < conditions.length; i++) {
                            // Checks if condition is matched and checkedStatus is null or "checked".
                            // Checked value can have 3 values
                            // NULL - for dropdowns
                            // false - for "unchecked" radios. This tipcally happens when predefined attribute is invisible and we don't have a value! This means that we should add all conditions in as NonMatchingItems
                            // true - when radio was checked + "value" is new value
                            // also check condition attribute is not hidden by display location
                            if (value !== undefined && conditions[i].value === parseInt(value) && (checkedStatus || checkedStatus === null) && !$("#"+ conditions[i].child).hasClass("hide")) {
                            matchingItems.push(conditions[i].child);
                            matchingItemsValues.set(conditions[i].child, conditions[i].selectionValues);
                            } else {
                            notMatchingItems.push(conditions[i].child);
                            }
                            }
                            notMatchingItems = toSet(notMatchingItems);
                            matchingItems = toSet(matchingItems);
                            //remove duplicates from notMatchingItems array
                            removeDuplicates(notMatchingItems, matchingItems);
                            updateVisibility(notMatchingItems, false);
                            updateVisibility(matchingItems, true);
                            // Rebuild the options of the matching items
                            availableAtributeValues(matchingItems, matchingItemsValues);
                            // Check if all your options are hidden to hide the attribute itself
                            hideAttributeIfChildrenHidden(matchingItems);
                            }
                            function toSet(arr)
                            {
                            return arr.filter(function(elem, index, self) {
                            return index == self.indexOf(elem);
                            });
                            }
                            /// <summary>
                            /// Availables the atribute values.
                            /// </summary>
                            /// <param name="list">The list.</param>
                            /// <param name="matchingItemsValues">The matching items values.</param>
                            /// <param name="checkedStatus">The checked status.</param>
                            function availableAtributeValues(matchingItems, matchingItemsValues, checkedStatus)
                            {
                            // First we do the matching ones, then we do the ones without values
                            for (var i = 0; i < matchingItems.length; i++) {
                            var item = $("#" + matchingItems[i]);
                            var availablevalues = matchingItemsValues.get(matchingItems[i]);
                            if(availablevalues == null)
                            {
                            // Check if the parent is a checkbox
                            if (checkedStatus != null)
                            {
                            updateChecknumAttribute($(item),checkedStatus);
                            // Show or hide depending on the number of checked
                            var showAttribute = $(item).attr("data-checknum") > 0;
                            updateNodeVisibility($(item), showAttribute);
                            }
                            else
                            {
                            item.find(".attributeLogic").each(function(index, attributeElem) {
                            // Do different things for different types of controls
                            if ($(attributeElem).is("select"))
                            {
                            $(attributeElem).find("option").show();
                            resetPredefinedValue(attributeElem);
                            }
                            });
                            }
                            }
                            else {
                            item.find(".attributeLogic").each(function(index, attributeElem) {
                            // Do different things for different types of controls
                            var relatedAttribute = 0;
                            var checkNum = null;
                            if ($(attributeElem).is("select")) {
                            // For selects we find the options
                            $(attributeElem).find("option").each(function(index, option) {
                            var show = false;
                            relatedAttribute = parseInt($(option).val());
                            // Always show the default option
                            if (relatedAttribute == 0) {
                            show = true;;
                            } else {
                            // Check if the parent is a checkbox
                            if (checkedStatus != null) {
                            if (availablevalues.indexOf(relatedAttribute) !== -1)
                            updateChecknumAttribute($(option), checkedStatus);
                            // Show or hide depending on the number of checked
                            show = $(option).attr("data-checknum") > 0;
                            } else {
                            show = availablevalues.indexOf(relatedAttribute) !== -1;
                            }
                            }
                            updateNodeVisibility($(option), show);
                            });
                            resetPredefinedValue(attributeElem);
                            } else if ($(attributeElem).attr('type') == 'radio') {
                            // For radios the inputs with the legend and info area
                            relatedAttribute = parseInt($(attributeElem).val());
                            // Check if the parent is a checkbox
                            if (checkedStatus != null) {
                            if (availablevalues.indexOf(relatedAttribute) !== -1)
                            updateChecknumAttribute($(attributeElem), checkedStatus);
                            // Show or hide depending on the number of checked
                            show = $(attributeElem).attr("data-checknum") > 0;
                            } else {
                            show = availablevalues.indexOf(relatedAttribute) !== -1;
                            }
                            updateNodeVisibility($(attributeElem), show);
                            updateNodeVisibility($("#label_" + relatedAttribute), show);
                            updateNodeVisibility($("#hook_" + relatedAttribute), show);
                            resetPredefinedValue(attributeElem);
                            }
                            });
                            }
                            }
                            }
                            function resetPredefinedValue(attributeElem) {
                            // set predefined value
                            var splits = attributeElem.name.split("_");
                            var $attrElement = $(attributeElem);
                            var attributeId = parseInt(splits[splits.length - 1]);
                            var defaultValues = predefinedValues[attributeId];
                            if (!!defaultValues) {
                            if ($attrElement.is(':radio')) {
                            var allDefaultValuesAreHidden = true;
                            var hasDefault = false;
                            for (var i = 0; i < defaultValues.length; i++) {
                            if ($attrElement.val() == defaultValues[i]) {
                            hasDefault = true;
                            var isHidden = $attrElement.css("display") == "none";
                            // if all the preselected values are hidden, select the first option
                            if (!isHidden) {
                            allDefaultValuesAreHidden = false;
                            }
                            $attrElement.prop('checked', !isHidden).change();
                            }
                            }
                            if (!hasDefault &&
                            $attrElement.css('display') != 'none' &&
                            $attrElement.closest('.attribute-item').find('input:checked').length === 0) {
                            $attrElement.prop('checked', allDefaultValuesAreHidden).change();
                            }
                            } else // for dropdowns
                            {
                            var availableOptions = $attrElement.find("option").filter(function() { return $(this).css("display") != "none"; });
                            var preselectedAvailableOption = availableOptions.filter(function() {
                            var val = parseInt($(this).val());
                            return defaultValues.indexOf(val) != -1;
                            }).first();
                            if (preselectedAvailableOption.length) {
                            $attrElement.val($(preselectedAvailableOption).val()).change();
                            }
                            else // if nothing is selected set available/not hidden option as pre-selected
                            {
                            if (availableOptions.length > 0) {
                            $attrElement.val(availableOptions[0].value).change();
                            }
                            }
                            }
                            } else {
                            var availableOptions = $attrElement.find("option").filter(function() { return $(this).css("display") != "none"; });
                            if(availableOptions.length > 0) {
                            var prevSelectedOption = availableOptions.filter(function() { return $(this).val() == $attrElement.selected().val(); });
                            $attrElement.val(prevSelectedOption.length ? prevSelectedOption[0].value : availableOptions[0].value).change();
                            }
                            }
                            }
                            /// <summary>
                            /// Updates the checknum attribute of the input element.
                            /// </summary>
                            /// <param name="option">The option.</param>
                            /// <param name="checkedStatus">The checked status of the parent.</param>
                            function updateChecknumAttribute(element, checkedStatus) {
                            checkNum = $(element).attr("data-checknum");
                            // Not present
                            if (checkNum == undefined)
                            checkNum = 0;
                            // Add or remove checks depending on the checked status
                            if (checkedStatus) {
                            ++checkNum;
                            } else {
                            --checkNum;
                            if (checkNum < 0)
                            checkNum = 0;
                            }
                            $(element).attr("data-checknum", checkNum);
                            }
                            /// <summary>
                            /// Updates the node visibility.
                            /// </summary>
                            /// <param name="node">The node.</param>
                            /// <param name="visibility">The visibility.</param>
                            function updateNodeVisibility(node, isVisible) {
                            var isIE = false || !!document.documentMode;
                            var isSafari = /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);
                            if (isVisible) {
                            if (isIE || isSafari) {
                            node.toggleOption(true);
                            }
                            if (node.attr('type') === "radio" && node.parent().hasClass('attribute-value-item') && node.parent().hasClass('column')) {
                            node.parent().show();
                            }
                            node.show();
                            node.find('.attributeLogic[data-required]').attr('required', '');
                            }
                            else {
                            resetInitialValues(node);
                            node.hide();
                            if (node.attr('type') === "radio" && node.parent().hasClass('attribute-value-item') && node.parent().hasClass('column')) {
                            node.parent().hide();
                            }
                            node.find('.attributeLogic[data-required]').removeAttr('required');
                            if (isIE || isSafari) {
                            node.toggleOption(false);
                            }
                            // un select hidden option, hidden items should not participate at price calculation
                            // do not use $ functions like .removeAttr/attr/prop because it resets entire element -> will break save quotes and product editing
                            node.selected = false;
                            }
                            }
                            function isAttributeOfType(node, type) {
                            return node.hasClass('type_' + type);
                            }
                            function resetInitialValues(node) {
                            if (isAttributeOfType(node, 'TextBox')) {
                            node.find('input').val('');
                            }
                            else if (isAttributeOfType(node, 'Datepicker')) {
                            node.find('input').each((idx, item) => $(item).val(''));
                            }
                            else if (isAttributeOfType(node, 'FileUpload')) {
                            node.find('[id^="deleteBtn-product_attribute"]').click();
                            }
                            if (node.attr('type') === "radio" && node.parent().hasClass('attribute-value-item') && node.parent().hasClass('column')) {
                            if ($(node).is(":checked")) {
                            $(node).removeAttr("checked");
                            }
                            }
                            node.selected = false;
                            }
                            jQuery.fn.toggleOption = function( show ) {
                            jQuery( this ).toggle( show );
                            if( show ) {
                            if( jQuery( this ).parent( 'span.toggleOption' ).length )
                            jQuery( this ).unwrap( );
                            } else {
                            if( jQuery( this ).parent( 'span.toggleOption' ).length == 0 )
                            jQuery( this ).wrap( '<span class="toggleOption" style="display: none;" />' );
                            }
                            };
                            /// <summary>
                            /// Hides the attribute if all the children are hidden.
                            /// </summary>
                            /// <param name="matchingItems">The matching items.</param>
                            function hideAttributeIfChildrenHidden(matchingItems) {
                            for (var i = 0; i < matchingItems.length; i++) {
                            var attributeNode = $("#" + matchingItems[i]);
                            // Only do this for attributes with attribute logic children
                            if (attributeNode.find(".attributeLogic").length > 0)
                            {
                            var showAttibute = false;
                            attributeNode.find(".attributeLogic").each(function(index, attributeElem)
                            {
                            if ($(attributeElem).is(":visible")) {
                            // Check if it is the value 0 of a dropdown list to hide the select
                            if ($(attributeElem).is("select")) {
                            $(attributeElem).children("option").each(function(index, option) {
                            // Ignore the 0 element
                            if (option.value != "0") {
                            // We use display css because :visible for options in Chrome does not work.
                            if ($(option).css("display") !== "none") {
                            showAttibute = true;
                            return;
                            }
                            }
                            });
                            } else {
                            showAttibute = true;
                            return;
                            }
                            }
                            });
                            updateNodeVisibility($(attributeNode), showAttibute);
                            }
                            }
                            }
                            /**
                            * Checks the attribute logic attributes for the pre selected value.
                            */
                            function checkForPreSelect() {
                            $('.rootAttribute').each(function() {
                            var rootAttributeId = $(this).attr("id"),
                            locationId = $(this).data("location");
                            // check the current location and set predefined values only
                            // for those attributes that needs to be shown on this location
                            if (!g_globalLocation || (g_globalLocation > 0 && g_globalLocation === locationId)) {
                            $(this).find(".attributeLogic").each(function(index, attributeElem) {
                            var value = $(attributeElem).val();
                            if (value !== "0" || value !== "") {
                            // For radios and checkboxes send an empty as otherwise it will take into account the last
                            if ($(attributeElem).attr('type') == 'radio' && !attributeElem.checked)
                            value = "";
                            if (value !== "")
                            handleAttributeItem(rootAttributeId, value, null);
                            }
                            });
                            }
                            });
                            }
                            // [name] is the name of the event "click", "mouseover", ..
                            // same as you'd pass it to bind()
                            // [fn] is the handler function
                            $.fn.bindFirst = function(name, fn) {
                            // bind as you normally would
                            this.bind(name, fn);
                            // support for namespaced events too.
                            this.each(function() {
                            var handlers = $._data(this, 'events')[name.split('.')[0]];
                            //console.log(handlers);
                            // take out the handler we just inserted from the end
                            var handler = handlers.pop();
                            // move it at the beginning
                            handlers.splice(0, 0, handler);
                            });
                            };
                            function updateSelectedAttributes() {
                            $.each($('.attributes'), function(i, attributesContainer) {
                            var attributesAndValues = [];
                            var $attributesContainer = $(attributesContainer);
                            var $saav = $attributesContainer.find('.saav');
                            $.each($attributesContainer.find('.attribute'), function(index, attributeContainer) {
                            var $attributeElements = $(attributeContainer).find('input, select, textarea');
                            var attributeInputElementsCount = $attributeElements.length;
                            function addAttribute($attributeElement) {
                            var ids = $attributeElement.attr('name').replace('product_attribute_', '').split('_');
                            var xmlAttributeId = ids[0];
                            var productAttributeId = ids[1];
                            var existingItem = attributesAndValues.filter(function(a) { return a.XAId == xmlAttributeId && a.PAId == productAttributeId; });
                            if (existingItem.length) {
                            if (existingItem[0].Vs) {
                            existingItem[0].Vs.push($attributeElement.val());
                            } else {
                            existingItem[0].Vs = [$attributeElement.val()];
                            }
                            } else {
                            attributesAndValues.push({
                            XAId : xmlAttributeId,
                            PAId : productAttributeId,
                            Vs : [$attributeElement.val()]
                            });
                            }
                            }
                            var isCheckbox = $attributeElements.is('input:checkbox');
                            if (attributeInputElementsCount === 1 && !isCheckbox) {
                            addAttribute($($attributeElements[0]));
                            }
                            else if (attributeInputElementsCount > 1 || isCheckbox) {
                            // multiple values
                            if (isCheckbox || $attributeElements.is('input:radio')) {
                            $.each($attributeElements.filter(':checkbox, :radio'),
                            function(i, attributeElement) {
                            if ($(attributeElement).is(':checked')) {
                            addAttribute($(attributeElement));
                            }
                            });
                            }
                            else if ($attributeElements.is('input:file')) {
                            addAttribute($($attributeElements.filter('input[type="hidden"]')[0]));
                            }
                            // DATEPICKER
                            else if ($attributeElements.is('input.attribute-datepicker')) {
                            addAttribute($(attributeContainer).find('input.actual-value'));
                            }
                            }
                            });
                            $saav.val(JSON.stringify(attributesAndValues));
                            });
                            $(".attributes__loading-overlay").removeClass("is-active");
                            }
                            function datePickerCallback(el, day, month, year) {
                            if (day < 10) {
                            day = '0' + day;
                            }
                            if (month < 10) {
                            month = '0' + month;
                            }
                            $(el).parents('.attribute').find('input.actual-value').val(year + '-' + month + '-' + day);
                            updateSelectedAttributes();
                            }
                            $(document).ready(function() {
                            $('.attributes').find('input[type != "file"], select, textarea').bindFirst('change', updateSelectedAttributes);
                            $("div.attribute:not('.rootAttribute')").hide();
                            $(".attributeLogic").on("change",
                            function()
                            {
                            //What did make a change and what is the new value
                            var attributeId = $(this).parents(".attribute").attr("id");
                            var value = $(this).val();
                            var checkedStatus = null;
                            if ($(this).is(":radio")) {
                            checkedStatus = $(this).is(":checked");
                            }
                            handleAttributeItem(attributeId, value, checkedStatus);
                            });
                            checkForPreSelect();
                            updateSelectedAttributes();
                            });
                          .clear
                          // product SKU, manufacturer part number, stock info
                          .clear
                          .clear
                          .clear
                          .clear
                          // Back in stock subscription
                          .clear
                          .clear
                          script(type='text/javascript').
                            //<![CDATA[
                            var priceValForDynUpd_63 = 8;
                            //]]>
               
                          script.
                            var isBtnActiveFromEvents = true;
                            var getPriceWithoutRefresh = "True" == "True";
                          .custom-product-form
                            input#price_311_EnteredQuantity.tempquantity.quantityBox(type='hidden' value='1')
                            ul#multiProductCustomProduct.buttons.is-multiline
                             each x in product.checkout_options
                              if x === 'Design For Me'
                               li
                                input#dynamic_318.button.productvariantaddtocartbutton.dynamic_product_start(data-product-id='318' type='submit' name='createDynamic-318' style='background: #8D6E97; padding: 0' value='Design For Me')
                             
                              if x === 'Design Online'
                               li
                                input#dynamic_318.button.productvariantaddtocartbutton.dynamic_product_start(data-product-id='318' type='submit' name='createDynamic-318' style='background: #8D6E97; padding: 0' value='Design Online')
                             
                              if x === 'Upload File'
                                li
                                 input#dynamic_317.button.productvariantaddtocartbutton.dynamic_product_start(data-product-id='317' type='submit' name='' style='' value='Upload FIle')
                            style.
                              #multiProductCustomProduct li {
                              padding: 3px;
                              }
                            script.
                              $(document)
                              .ready(function () {
                              $('#price_000_EnteredQuantity')
                              .bind('keyup input paste',
                              function() {
                              var value = $(this).val();
                              if (Math.floor(value) == value && isInt(value)) {
                              $(this).removeClass('input-validation-error').addClass('valid');
                              $('#price_311_EnteredQuantity')
                              .val(value)
                              .change();
                              } else {
                              $(this).removeClass('valid').addClass('input-validation-error');
                              }
                              });
                              $('#multiProductCustomProduct input[type="submit"]')
                              .click(function () {
                              $('.tempquantity').remove();
                              // validate
                              var value = $('#price_000_EnteredQuantity').val();
                              if (!(Math.floor(value) == value && isInt(value))) return false;
                              // change name of quantity
                              var productId = $(this).data('product-id');
                              $('#price_000_EnteredQuantity')
                              .attr('name',"price_000.EnteredQuantity".replace('000', productId));
                              $(this)
                              .parents('form')
                              .append('<input type="hidden" name ="selectedProductVariantId" value="' + productId + '" />');
                              });
                              });
                              function isInt(value) {
                              return !isNaN(value) && (function(x) { return (x | 0) === x; })(parseFloat(value));
                              }
                            script.
                              $(document).ready(function () {
                              $(".quantityBox").on('input', function () {
                              var baseQuantity = $(this).val();
                              var event = new CustomEvent(
                              'changed-quantity', { 'detail': baseQuantity }
                              );
                              document.dispatchEvent(event);
                              })
                              });
                              document.addEventListener('updateProductPrice',
                              function () {
                              //Is added the set timeout because jquery get serialzed form will not work properly with this event raised by VUEJS component
                              setTimeout(function () {
                              GetNewPrice();
                              }, 5)
                              });
                              document.addEventListener('onChangeAddToBasketButtonActivate',
                              function () {
                              isBtnActiveFromEvents = true;
                              $("input.productvariantaddtocartbutton").prop('disabled', false);
                              });
                              document.addEventListener('onChangeAddToBasketButtonDeactivate',
                              function () {
                              isBtnActiveFromEvents = false;
                              $("input.productvariantaddtocartbutton").prop('disabled', true);
                              });
                          .add-info
                            .quantityBox__container.block
                            .buttons
                            .clear
                          style.
                            .red-border {
                            border: 1px solid red;
                            }
                            .green-text {
                            color: green;
                            }
                            .red-color {
                            color: red;
                            }
                          
                            
                           
                      .product-specs
                      // product reviews
                      style.
                        .DT_tab_button.DTB3 {
                        display: inline-block !important;
                        }
                      
                    .clear
                    // product manufactures
                    .clear
                    .clear
                    span#client_side_errors_span.error(style='display: none')
                      span.errorIcon
                        i.fa.fa-exclamation-circle(aria-hidden='true')
                      span#errors_text.errors
                    .clear
                    span#client_side_information_span.information(style='display: none')
                      span.infoIcon
                        i.fa.fa-exclamation-circle(aria-hidden='true')
                      span#informations_text.informations
                    .emailCompareWrapper
                    .shareWrapper
                    // Product Specifications
                    div
                    // Product Tags
                    .clearfix
                      .producttags-box
                        .producttags-box__title.label
                          | Product tags
                        .clear
                        .producttags-list.field.is-grouped.is-grouped-multiline
                          span.control
                            a.producttags-wrapper.tags.has-addons(href='../../productag/128/Badge.html')
                              span.producttag.tag Badge
                              span.tag.is-primary
                                span.is-hidden-arone (
                                | 1
                                span.is-hidden-arone )
                            .producttags-separator.is-hidden-arone
                              | ,
                          span.control
                            a.producttags-wrapper.tags.has-addons(href='../../productag/129/Badge%20Pin.html')
                              span.producttag.tag Badge Pin
                              span.tag.is-primary
                                span.is-hidden-arone (
                                | 1
                                span.is-hidden-arone )
                            .producttags-separator.is-hidden-arone
                              | ,
                          span.control
                            a.producttags-wrapper.tags.has-addons(href='../../productag/130/Pin.html')
                              span.producttag.tag Pin
                              span.tag.is-primary
                                span.is-hidden-arone (
                                | 1
                                span.is-hidden-arone )
              .DT_product-description_lower
                
                script(src='../../Scripts/momentjs/moment-with-locales.min.js')
                script(src='../../Scripts/momentjs/moment-business-days.js')
                script(src='../../Scripts/momentjs/moment-timezone-with-data-2010-2020.min.js')
                script(src='../../Scripts/countdownjs/countdown.min.js')
                script(src='../../Scripts/momentjs/moment-countdown.min.js')
                script(src='../../Scripts/jstz-timezone/jstz.min.js')
                script(src='../../Scripts/product-landing-page/delivery.countdown.js')
                script.
                  var countDown = new DeliveryCountdown(0, 'en-GB', '/Common/GetDispatchData', 311)
                  countDown.init();
                .aditional_text(style='margin-top: 20px;')
                  .addProductImgCont
                    h3.tagLine Other products
                    .productImages
                     each x,index in products 
                      if index <= 3
                       if x.name !== product.name
                        .addProductImg
                         a(href='/product/#{x.name}')
                          img(src='#{x.cover}')
                          strong #{x.name}

                  .extraButtonCont
                  .attribute_descriptions.is-hidden
                  script.
                    $(document).ready(function () {
                    function domShuffleAppend(source, target) {
                    if ($(source)[0]) {
                    $(source).each(function () {
                    $(target).append($(this).html());
                    $(this).remove();
                    });
                    }
                    }
                    domShuffleAppend('.layout--twocolumnProductPage .addProductImgCont',
                    '.DT_product-essential .DT_product-details-info');
                    domShuffleAppend('.layout--twocolumnProductPage .extraButtonCont',
                    '.overview .product-variant-line .add-info .buttons');
                    $(".fulldescription").append("<div class='additional-description'>");
                    function inputAttributeDescription() {
                    var elementText = $("select.Stock").find(":selected").text().trim();
                    console.log(elementText);
                    // var elementValue = $("select.Stock").find(":selected").val();
                    // console.log(elementValue);
                    var descText = $(".attribute_descriptions .item[data-name='" + elementText + "']").text();
                    $(".additional-description").text(descText);
                    }
                    $("select.Stock").on("change", function () {
                    inputAttributeDescription();
                    })
                    inputAttributeDescription();
                    });
          // Related Products
          // Products Also Purchased
      script.
        function DT_close_video() {
        $('.DT_video_container').css('display', 'none');
        var url = $('.DT_video_container iframe').attr('src');
        $('.DT_video_container iframe').attr('src', '');
        $('.DT_video_container iframe').attr('src', url);
        }
